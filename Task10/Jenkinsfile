pipeline {
    agent any
    
    environment {
        IMAGE_TAG = "${BUILD_NUMBER}"
    }
    
    stages {
        stage('Build') {
            steps {
                echo 'Building Spring Pet Clinic image...'
                script {
                    sh '''
                    docker build -t spring-petclinic:${IMAGE_TAG} .
                    docker tag spring-petclinic:${IMAGE_TAG} spring-petclinic:latest
                    '''
                }
            }
        }
        
        stage('Test') {
            steps {
                echo 'Testing image creation...'
                script {
                    sh '''
                    docker images | grep spring-petclinic
                    echo 'Image created successfully'
                    '''
                }
            }
        }
        
        stage('Stop Existing Services') {
            steps {
                echo 'Stopping existing services...'
                script {
                    sh '''
                    docker-compose -f docker-compose.yml down || true
                    '''
                }
            }
        }
        
        stage('Deploy') {
            steps {
                echo 'Deploying application with Docker Compose...'
                script {
                    sh '''
                    docker-compose -f docker-compose.yml up -d 
                    echo "Waiting for services to start..."
                    sleep 30
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline completed!'
            script {
                sh '''
                docker ps | grep sp_app || echo "App container not found"
                docker ps | grep db || echo "DB container not found"
                docker ps
                '''
            }
        }
        
        success {
            echo 'Pipeline succeeded! Application deployed successfully.'
        }
        
        failure {
            echo 'Pipeline failed! Check logs for errors.'
            script {
                sh 'docker-compose logs --tail=20'
            }
        }
    }
}
